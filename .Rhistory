line=list(color='red',
width=3))
)
p
p=plot_ly(data=mtcars,
x=~wt,
y=~mpg,
type='scatter',
mode='markers',
color=~as.factor(cyl))
)
p=plot_ly(data=mtcars,
x=~wt,
y=~mpg,
type='scatter',
mode='markers',
color=~as.factor(cyl)
)
p
p=plot_ly(data=mtcars,
x=~wt,
y=~mpg,
type='scatter',
mode='markers',
color=~as.factor(cyl),
colors='set1'
)
p
p=plot_ly(data=mtcars,
x=~wt,
y=~mpg,
type='scatter',
mode='markers',
color=~as.factor(cyl),
colors='Set1'
)
p
pal<-c("red","blue","green")
p=plot_ly(data=mtcars,
x=~wt,
y=~mpg,
type='scatter',
mode='markers',
color=~as.factor(cyl),
colors='pal'
)
p
pal<-c("red","blue","green")
p=plot_ly(data=mtcars,
x=~wt,
y=~mpg,
type='scatter',
mode='markers',
color=~as.factor(cyl),
colors='pal'
)
p
pal<-c("red","blue","green")
p=plot_ly(data=mtcars,
x=~wt,
y=~mpg,
type='scatter',
mode='markers',
color=~as.factor(cyl),
colors=pal
)
p
p=plot_ly(data=mtcars,
x=~wt,
y=~mpg,
type='scatter',
mode='markers',
symbol=~as.factor(cyl),
symbols=c('circle','x','o'),
marker=list(size=7)
)
p
p=plot_ly(data=mtcars,
x=~wt,
y=~mpg,
type='scatter',
mode='markers',
color=~disp,#displacement
)
p=plot_ly(data=mtcars,
x=~wt,
y=~mpg,
type='scatter',
mode='markers',
color=~disp#displacement
)
p
p=plot_ly(data=mtcars,
x=~wt,
y=~mpg,
type='scatter',
mode='markers',
color=~as.factor(cyl)
size=~hp
p=plot_ly(data=mtcars,
x=~wt,
y=~mpg,
type='scatter',
mode='markers',
color=~as.factor(cyl),
size=~hp
)
p
p=plot_ly(data=mtcars,
x=~wt,
y=~mpg,
type='scatter',
mode='markers',
color=~as.factor(cyl),
symbol=~as.factor(cyl),
symbols=c("circle","x","o")
marker=list(size=9) %>%
p=plot_ly(data=mtcars,
x=~wt,
y=~mpg,
type='scatter',
mode='markers',
color=~as.factor(cyl),
symbol=~as.factor(cyl),
symbols=c("circle","x","o"),
marker=list(size=9) %>%
layout(showlegend = FALSE)
)
p=plot_ly(data=mtcars,
x=~wt,
y=~mpg,
type='scatter',
mode='markers',
color=~as.factor(cyl),
symbol=~as.factor(cyl),
symbols=c("circle","x","o"),
marker=list(size=9)) %>%
layout(showlegend = FALSE)
)
p=plot_ly(data=mtcars,
x=~wt,
y=~mpg,
type='scatter',
mode='markers',
color=~as.factor(cyl),
symbol=~as.factor(cyl),
symbols=c('circle','x','o'),
marker=list(size=9)) %>%
layout(showlegend = FALSE)
)
p=plot_ly(data=mtcars,
x=~wt,
y=~mpg,
type='scatter',
mode='markers',
color=~as.factor(cyl),
symbol=~as.factor(cyl),
symbols= c('circle','x','o'),
marker=list(size=9)) %>%
layout(showlegend = FALSE)
)
p=plot_ly(data=mtcars,
x=~wt,
y=~mpg,
type='scatter',
mode='markers',
color=~as.factor(cyl),
symbol=~as.factor(cyl),
symbols= c('circle','x','o'),
marker=list(size=9)) %>%
layout(showlegend = FALSE)
)
p=plot_ly(data=mtcars,
x=~wt,
y=~mpg,
type="scatter",
mode="markers",
color=~as.factor(cyl),
symbol=~as.factor(cyl),
symbols= c('circle','x','o'),
marker=list(size=9)) %>%
layout(showlegend = FALSE)
)
p=plot_ly(data=mtcars,
x=~wt,
y=~mpg,
type="scatter",
mode="markers",
symbol = ~as.factor(cyl),
symbols = c('circle','x','o'),
marker=list(size=9)) %>%
layout(showlegend = FALSE)
)
p=plot_ly(data=mtcars,
x=~wt,
y=~mpg,
type="scatter",
mode="markers",
symbol = ~as.factor(cyl),
symbols = c('circle','x','o'),
marker=list(size=9)) %>%
layout(showlegend = FALSE)
p
p=plot_ly(data=mtcars,
x=~wt,
y=~mpg,
type="scatter",
mode="markers",
symbol = ~as.factor(cyl),
symbols = c('circle','x','o'),
marker=list(size=9)) %>%
layout(showlegend = "Bottom")
p
p=plot_ly(data=mtcars,
x=~wt,
y=~mpg,
type="scatter",
mode="markers",
symbol = ~as.factor(cyl),
symbols = c('circle','x','o'),
marker=list(size=9)) %>%
layout(showlegend = FALSE)
p=layout(p,showlegend = FALSE)
p=plot_ly(data=mtcars,
x=~wt,
y=~mpg,
type="scatter",
mode="markers",
symbol = ~as.factor(cyl),
symbols = c('circle','x','o'),
marker=list(size=9)) %>%
layout(showlegend = FALSE)
p=layout(p,showlegend = FALSE)
p=plot_ly(data=mtcars,
x=~wt,
y=~mpg,
type="scatter",
mode="markers",
symbol = ~as.factor(cyl),
symbols = c('circle','x','o'),
marker=list(size=9)) %>%
layout(showlegend = FALSE)
p=layout(p,showlegend = FALSE)
p=plot_ly(data=mtcars,
x=~wt,
y=~mpg,
type="scatter",
mode="markers",
symbol = ~as.factor(cyl),
symbols = c('circle','x','o'),
marker=list(size=9)) %>%
layout(showlegend = FALSE)
p
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE,
fig.width = 7)
library(tidyverse)
library(plotly)
plot_ly(diamonds, x = ~cut)
plot_ly(diamonds, x=~cut, y =~ clarity)
plot_ly(diamonds, x=~cut, color = ~clarity)
plot_ly(diamonds, x=~cut, color = ~clarity, colors = "Accent")
plot_ly(diamonds, x = ~cut, color = "black")
plot_ly(
diamonds,
x = ~cut,
color = I("red"),
stroke = I("black"),
span = I(2))
layout(
plot_ly(diamonds, x = ~cut),
title = "Bar chart for CUT"
)
diamonds %>%
plot_ly(x = ~cut) %>%
layout(title = "Bar chart for CUT")
diamonds %>%
plot_ly() %>%
add_histogram(x = ~cut) %>%
layout(title = "Bar chart for CUT")
diamonds %>%
dplyr::count(cut) %>%
plot_ly() %>%
add_bars(x = ~cut, y = ~n) %>%
layout(title = "Bar chart for CUT")
diamonds %>%
plot_ly(x = ~cut) %>%  # CUT is assigned to x globally
add_histogram() %>%  # this layer inherits X from Plot_ly
group_by(cut) %>%  #using dplyr here we summarize the counts in each category
summarise(n = n()) %>%
add_text(    # adding the label
text = ~scales::comma(n), y = ~n,
textposition = "top middle")
diamonds %>%
plot_ly(x = ~cut) %>%
add_histogram() %>%
group_by(cut) %>%
summarise(n = n()) %>%
plotly_data()
d <- diamonds[sample(nrow(diamonds), 1000), ]
(p <- plot_ly(
d, x = ~carat, y = ~price,
color = ~carat, size = ~carat
))
(p <- plot_ly(
d, x = ~carat, y = ~price,
color = ~carat, size = ~carat,
text = ~paste("Price:$", price, '<br>Cut:', cut)
))
trace_0 <- rnorm(100, mean = 5)
trace_1 <- rnorm(100, mean = 0)
trace_2 <- rnorm(100, mean = -5)
x <- c(1:100)
data <- data.frame(x, trace_0, trace_1, trace_2)
(fig <- plot_ly(data, x = ~x) %>%
add_trace(y = ~trace_0, name = 'trace 0', mode = 'lines') %>%
add_trace(y = ~trace_1, name = 'trace 1', mode = 'lines+markers') %>%
add_trace(y = ~trace_2, name = 'trace 2', mode = 'markers'))
(fig <- plot_ly(data, x = ~x, y = ~trace_0,type = 'scatter' ,
name = 'trace 0', mode = 'lines') %>%
add_trace(y = ~trace_1, name = 'trace 1', mode = 'lines+markers') %>%
add_trace(y = ~trace_2, name = 'trace 2', mode = 'markers'))
x <- c('January', 'February', 'March', 'April', 'May', 'June',
'July', 'August', 'September', 'October', 'November', 'December')
y1 <- c(20, 14, 25, 16, 18, 22, 19, 15, 12, 16, 14, 17)
y2 <- c(19, 14, 22, 14, 16, 19, 15, 14, 10, 12, 12, 16)
data <- data.frame(x, y1, y2)
#The default order will be alphabetized unless specified as below:
data$x <- factor(data$x, levels = data[["x"]])
(p = plot_ly(data, x = ~x, y = ~y1, type = 'bar', name = 'Primary Product',
marker = list(color = 'rgb(49,130,189)')) %>%
add_trace(y = ~y2, name = 'Secondary Product',
marker = list(color = 'rgb(204,204,204)')) %>%
layout(xaxis = list(title = "", tickangle = -45),
yaxis = list(title = ""),
margin = list(b = 100),
barmode = 'group'))
library(tidyquant)
install.packages(tidyquant)
getSymbols("GOOG",
from = "2018-01-01",
to = "2019-12-31")
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE,
fig.width = 7)
library(leaflet)
library(tidyverse)
leaflet() %>%
addTiles() #base map
leaflet() %>%
addProviderTiles(providers$OpenTopoMap)
leaflet() %>%
addProviderTiles(providers$Esri.WorldStreetMap)
leaflet() %>%
addProviderTiles(providers$Esri.WorldImagery)
leaflet() %>%
setView(lng = -71.0589, lat = 42.3601, zoom = 12) %>%
addProviderTiles(providers$MtbMap) %>%
addProviderTiles(providers$OpenRailwayMap,
options = providerTileOptions(opacity = 0.35)) %>%
addProviderTiles(providers$SafeCast,options = providerTileOptions(opacity = 0.25))
crime = dat = read.csv('crime_data_2012.csv')
library(ggplot2)
library(dplyr)
library(gridExtra)
library(ggimage)
library(tidyverse)
# Visualization for figure 1: Data frame for market share
market_data <- data.frame(
Country = c("Norway", "Iceland", "Sweden", "Denmark", "Netherlands", "Belgium", "Finland", "Switzerland"),
Market_Share = c(29, 18, 11, 11, 8.3, 8.2, 8.1, 5.8),
Flag_URL = c('norway.png',
'iceland.png',
'sweden.png',
'denmark.png',
'netherlands.png',
'belgium.png',
'finland.png',
'swiss.png')
)
# Horizontal bar chart for market share
plot1=ggplot(market_data, aes(x = reorder(Country, Market_Share), y = Market_Share)) +
geom_bar(stat = "identity", fill = "seagreen") +
geom_image(aes(image = Flag_URL), size = 0.3) +  # Removed 'by' argument
labs(title = "Top Markets by PEV Market Share (December 2023)",
x = "Country", y = "Percentage of Plug-in  Cars in Use") +
theme_minimal()
sales_data <- data.frame(
Country = c("USA", "World", "Europe", "France", "UK", "Germany", "China"),
Sales_Volume = c(2.1, 3.2, 3.8, 4.1, 5.0, 5.4, 7.6),
Flag_URL1 = c('usa.png','world.png',
'europe.png','france.png',
'uk.png','germeny.png',
'china.png')
)
#sales volume
plot2=ggplot(sales_data, aes(x = reorder(Country, Sales_Volume), y = Sales_Volume)) +
geom_bar(stat = "identity", fill = "lightblue") +
geom_image(aes(image = Flag_URL1), size = 0.3) +
labs(title = "Top Markets by PEV Sales Volume (December 2023)",
x = "Country", y = "Percentage of Plug-in Cars in Use") +
theme_minimal()
#plot
grid.arrange(plot1, plot2, ncol = 1)
library(plotly)
# Data for the PEV volume by country
pev_data <- data.frame(
Country = c("USA", "France", "UK", "Germany", "China", "Norway", "Iceland",
"Sweden", "Denmark", "Netherlands", "Belgium", "Finland", "Switzerland"),
Code = c("USA", "FRA", "GBR", "DEU", "CHN", "NOR", "ISL",
"SWE", "DNK", "NLD", "BEL", "FIN", "CHE"),
PEV_Share = c(2.1, 4.1, 5.0, 5.4, 7.6, 29, 18, 11, 11, 8.3, 8.2, 8.1, 5.8)
)
# Create the choropleth map for PEV Share
fig <- plot_ly(pev_data,
type = 'choropleth',
locations = ~Code,
z = ~PEV_Share,
text = ~paste(Country, "<br>PEV Share:", PEV_Share, "%"),
colorscale = 'Greens',
autocolorscale = FALSE,
reversescale = TRUE,
marker = list(line = list(color = 'rgb(180,180,180)', width = 0.5)),
colorbar = list(title = 'PEV Volume (%)'))
# Update the layout for the PEV map
fig <- fig %>% layout(
title = 'PEV Volume by Country',
geo = list(
showframe = FALSE,
showcoastlines = TRUE,
showland = TRUE,
landcolor = "rgb(217, 217, 217)",
coastlinecolor = "rgb(180, 180, 180)",
projection = list(type = 'Mercator'),
countrycolor = 'rgb(180, 180, 180)',
countrywidth = 0.5
)
)
# Data for the Market Share by country
market_share <- data.frame(
Country = c("Norway", "Iceland", "Sweden", "Denmark", "Netherlands", "Belgium", "Finland", "Switzerland"),
Code = c("NOR", "ISL", "SWE", "DNK", "NLD", "BEL", "FIN", "CHE"),
Market_Share = c(29, 18, 11, 11, 8.3, 8.2, 8.1, 5.8)
)
# Create the choropleth map for Market Share
fig2 <- plot_ly(market_share,
type = 'choropleth',
locations = ~Code,
z = ~Market_Share,
text = ~paste(Country, "<br>Market Share:", Market_Share, "%"),
colorscale = 'Blues',
autocolorscale = FALSE,
reversescale = TRUE,
marker = list(line = list(color = 'rgb(180,180,180)', width = 0.5)),
colorbar = list(title = 'Market Share (%)'))
# Update the layout for the Market Share map
fig2 <- fig2 %>% layout(
title = 'Market Share by Country',
geo = list(
showframe = FALSE,
showcoastlines = TRUE,
showland = TRUE,
landcolor = "rgb(217, 217, 217)",
coastlinecolor = "rgb(180, 180, 180)",
projection = list(type = 'Mercator'),
countrycolor = 'rgb(180, 180, 180)',
countrywidth = 0.5
)
)
# Create a subplot to show both maps side by side
combined_fig <- subplot(fig, fig2, nrows = 1, margin = 0.05)
# Show the combined plot
combined_fig
library(ggplot2)
library(dplyr)
# Example data
data <- data.frame(
Category = rep(c("Population", "Road Traffic Deaths", "Registered Vehicles"), each = 3),
Group = rep(c("High Income", "Middle Income", "Low Income"), times = 3),
Value = c(20, 60, 20, 10, 70, 20, 55, 30, 15)
)
# Create the stacked bar chart
ggplot(data, aes(x = Category, y = Value, fill = Group)) +
geom_bar(stat = "identity", position = "fill") +
scale_y_continuous(labels = scales::percent) +
labs(title = "Global Comparison by Income Group",
y = "Proportion (%)", x = "Category") +
scale_fill_manual(values = c("High Income" = "darkblue", "Middle Income" = "orange", "Low Income" = "red")) +
theme_minimal()
library(ggplot2)
library(tidyr)
# Example data for vehicle ownership and road deaths by income group
data <- data.frame(
Group = c("High Income", "Middle Income", "Low Income"),
Vehicles = c(50, 35, 15),
Deaths = c(10, 70, 90)
)
# Transform the data into long format for side-by-side bars
data_long <- data %>%
pivot_longer(cols = c("Vehicles", "Deaths"), names_to = "Category", values_to = "Percentage")
# Create the side-by-side bar plot
ggplot(data_long, aes(x = Group, y = Percentage, fill = Category)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Vehicle Ownership vs. Road Deaths by Income Group",
y = "Percentage (%)", x = "Income Group") +
scale_fill_manual(values = c("Vehicles" = "darkblue", "Deaths" = "red")) +
theme_minimal() +
theme(legend.title = element_blank())
